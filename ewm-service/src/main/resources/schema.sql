drop table if exists requests;
drop table if exists compilation_event;
drop table if exists compilations;
drop table if exists events;
drop table if exists categories;
drop table if exists users;

create table if not exists categories
(
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name varchar unique not null
);

comment on table categories is 'Категории событий';
comment on column categories.id is 'Идентификатор категории';
comment on column categories.name is 'Название категории';

---
create table if not exists users
(
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name varchar not null,
    email varchar unique not null
);

comment on table users is 'Пользователи';
comment on column users.id is 'Идентификатор пользователя';
comment on column users.name is 'Имя пользователя';
comment on column users.email is 'Электронная почта пользователя';

create table if not exists events
(
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    annotation varchar not null,
    description varchar not null,
    event_date timestamp not null,
    location_latitude float default null,
    location_longitude float default null,
    paid boolean default false,
    participant_limit int default 0,
    request_moderation boolean default true,
    title varchar default null,
    category_id bigint default null,
    creator_id bigint default null,
    creation_dttm timestamp not null default now(),
    publication_dttm timestamp default null,
    status varchar not null default 'PENDING',

    CONSTRAINT fk_users_to_categories FOREIGN KEY(category_id) REFERENCES categories(id),
    CONSTRAINT fk_items_to_requests FOREIGN KEY(creator_id) REFERENCES users(id)
);

---
create table if not exists requests
(
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    requester_id bigint not null,
    event_id bigint not null,
    status varchar not null default 'PENDING',
    created timestamp not null default now(),

    CONSTRAINT fk_requests_to_users FOREIGN KEY(requester_id) REFERENCES users(id),
    CONSTRAINT fk_requests_to_events FOREIGN KEY(event_id) REFERENCES events(id)
);

comment on table requests is 'Заявки на участие в событии';
comment on column requests.id is 'Идентификатор заявки';
comment on column requests.requester_id is 'Идентификатор автора заявки';
comment on column requests.event_id is 'Идентификатор события в котором хочется участвовать пользователю';
comment on column requests.status is 'Статус заявки';
comment on column requests.created is 'Дата создания заявки';

---
create table if not exists compilations
(
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title varchar not null,
    pinned boolean not null default false
);

comment on table compilations is 'Компиляции событий';
comment on column compilations.id is 'Идентификатор компиляции';
comment on column compilations.title is 'Название компиляции';
comment on column compilations.pinned is 'Признак того, что компиляция закреплена';

---
create table if not exists compilation_event
(
    compilation_id bigint not null,
    event_id bigint not null,
    CONSTRAINT compilations_fk_1 FOREIGN KEY(compilation_id) REFERENCES compilations(id),
    CONSTRAINT compilations_fk_2 FOREIGN KEY(event_id) REFERENCES events(id)
);

comment on table compilations is 'Компиляции событий';
comment on column compilations.id is 'Идентификатор компиляции';
comment on column compilations.title is 'Название компиляции';
comment on column compilations.pinned is 'Признак того, что компиляция закреплена';