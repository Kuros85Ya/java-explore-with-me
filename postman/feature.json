{
	"info": {
		"_postman_id": "32e285aa-7f30-48be-b3c2-cfbbdfe935f0",
		"name": "Location feature tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28262209"
	},
	"item": [
		{
			"name": "Location",
			"item": [
				{
					"name": "Admin Create Location",
					"item": [
						{
							"name": "Добавление новой локации",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let location;\r",
											"    try {\r",
											"        location = rnd.getLocation();\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(location),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Локация должна содержать поля: id, longitude, latitude\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('longitude');\r",
											"pm.expect(target).to.have.property('latitude');\r",
											"pm.expect(target).to.have.property('description');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(source.longitude).equal(target.longitude, 'Поле локации должно совпадать с отправленным');\r",
											"    pm.expect(source.latitude).equal(target.latitude, 'Поле локации должно совпадать с отправленным');\r",
											"    pm.expect(source.description).equal(target.description, 'Поле локации должно совпадать с отправленным');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/locations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"locations"
									]
								},
								"description": "Обратите внимание: имя категории должно быть уникальным"
							},
							"response": []
						},
						{
							"name": "Добавление новой локации без необходимого поля в теле запроса",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    class GetLocation {\r",
											"    getLocation() {\r",
											"        return {\r",
											"            description: pm.variables.replaceIn('{{$randomFullName}}'),\r",
											"            longitude: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}'))\r",
											"        };\r",
											"    }\r",
											"    }\r",
											"    const loc = new GetLocation();\r",
											"\r",
											"    let location;\r",
											"    try {\r",
											"        location = loc.getLocation();\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(location),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/locations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"locations"
									]
								},
								"description": "Обратите внимание: имя категории должно быть уникальным"
							},
							"response": []
						},
						{
							"name": "Добавление новой локации - длина описания меньше минимально необходимой",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    class GetLocation {\r",
											"    getLocation() {\r",
											"        return {\r",
											"            description: 'a',\r",
											"            latitude: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),\r",
											"            longitude: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}'))\r",
											"        };\r",
											"    }\r",
											"    }\r",
											"    const loc = new GetLocation();\r",
											"\r",
											"    let location;\r",
											"    try {\r",
											"        location = loc.getLocation();\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(location),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/locations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"locations"
									]
								},
								"description": "Обратите внимание: имя категории должно быть уникальным"
							},
							"response": []
						}
					]
				},
				{
					"name": "Admin Create Compilation By Location",
					"item": [
						{
							"name": "Добавление новой компиляции событий, находящихся близко от искомой точки",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    class GetLocation {\r",
											"    getLocation() {\r",
											"        return {\r",
											"            description: pm.variables.replaceIn('{{$randomFullName}}'),\r",
											"            latitude: 10,\r",
											"            longitude: -10\r",
											"        };\r",
											"    }\r",
											"    }\r",
											"    const loc = new GetLocation();\r",
											"\r",
											"    let location;\r",
											"    try {\r",
											"        location = loc.getLocation();\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", user.id)\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event1 = await api.addEvent(user.id, rnd.getEventWithLocation(11, -11, category.id));\r",
											"        let event2 = await api.addEvent(user.id, rnd.getEventWithLocation(9, -8, category.id));\r",
											"        let event3 = await api.addEvent(user.id, rnd.getEventWithLocation(1000, -1000, category.id));\r",
											"\r",
											"        event1 = await api.publishEvent(event1.id);\r",
											"        event2 = await api.publishEvent(event2.id);\r",
											"        event3 = await api.publishEvent(event3.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    try {\r",
											"        location = await api.addLocation(location);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"    pm.collectionVariables.set(\"locationId\", Number(location.id))\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Подборка должны содержать поля: id, title, pinned, events\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('title');\r",
											"pm.expect(target).to.have.property('pinned');\r",
											"pm.expect(target).to.have.property('events');\r",
											"});\r",
											"\r",
											"pm.test(\"Событий должно быть только 2. Это события происходящие близко от поисковой точки\", function () {\r",
											"    pm.expect(target.events.length).equal(2);\r",
											"    pm.expect(target.events[0].location.lat).equal(11);\r",
											"    pm.expect(target.events[1].location.lon).equal(-8);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/locations/:locationId/compilation",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"locations",
										":locationId",
										"compilation"
									],
									"variable": [
										{
											"key": "locationId",
											"value": "{{locationId}}"
										}
									]
								},
								"description": "Обратите внимание: имя категории должно быть уникальным"
							},
							"response": []
						},
						{
							"name": "Добавление новой компиляции событий на основе несуществующей локации",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let location;\r",
											"    try {\r",
											"        location = rnd.getLocation();\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", user.id)\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event1 = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        event1 = await api.publishEvent(event1.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    try {\r",
											"        location = await api.addLocation(location);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"    pm.collectionVariables.set(\"locationId\", Number(location.id + 2))\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.be.notFound;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/locations/:locationId/compilation",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"locations",
										":locationId",
										"compilation"
									],
									"variable": [
										{
											"key": "locationId",
											"value": "{{locationId}}"
										}
									]
								},
								"description": "Обратите внимание: имя категории должно быть уникальным"
							},
							"response": []
						}
					]
				},
				{
					"name": "Authorized Get Events By User Location",
					"item": [
						{
							"name": "Получить события рядом с любимой на данной момент точкой пользователя",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    class GetLocation {\r",
											"    getLocation() {\r",
											"        return {\r",
											"            description: pm.variables.replaceIn('{{$randomFullName}}'),\r",
											"            latitude: 2,\r",
											"            longitude: 2\r",
											"        };\r",
											"    }\r",
											"    }\r",
											"    const loc = new GetLocation();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", user.id)\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event1 = await api.addEvent(user.id, rnd.getEventWithLocation(1, 1, category.id));\r",
											"        let event2 = await api.addEvent(user.id, rnd.getEventWithLocation(3, 3, category.id));\r",
											"        let event3 = await api.addEvent(user.id, rnd.getEventWithLocation(11000, -11000, category.id));\r",
											"        event1 = await api.publishEvent(event1.id);\r",
											"        event2 = await api.publishEvent(event2.id);\r",
											"        event3 = await api.publishEvent(event3.id);\r",
											"\r",
											"        const submittedUser = await api.addUser(rnd.getUser());\r",
											"        const requestToJoin1 = await api.publishParticipationRequest(event1.id, submittedUser.id);\r",
											"        const requestToJoin2 = await api.publishParticipationRequest(event2.id, submittedUser.id);\r",
											"        pm.collectionVariables.set(\"userId\", Number(submittedUser.id))\r",
											"\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    let location;\r",
											"    try {\r",
											"        location = loc.getLocation();\r",
											"        location = await api.addLocation(location);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Событий должно быть только 2. Это события происходящие близко от поисковой точки\", function () {\r",
											"    pm.expect(target.length).equal(2);\r",
											"    pm.expect(target[0].location.lat).equal(1);\r",
											"    pm.expect(target[1].location.lon).equal(3);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/locations?isNearFavorite=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										"locations"
									],
									"query": [
										{
											"key": "isNearFavorite",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}"
										}
									]
								},
								"description": "Обратите внимание: имя категории должно быть уникальным"
							},
							"response": []
						},
						{
							"name": "Получить события рядом с последней посещенной точкой пользователя",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    class GetLocation {\r",
											"    getLocation() {\r",
											"        return {\r",
											"            description: pm.variables.replaceIn('{{$randomFullName}}'),\r",
											"            latitude: 10001,\r",
											"            longitude: -10002\r",
											"        };\r",
											"    }\r",
											"    }\r",
											"    const loc = new GetLocation();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", user.id)\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event1 = await api.addEvent(user.id, rnd.getEventWithLocation(-17, -17, category.id));\r",
											"        let event2 = await api.addEvent(user.id, rnd.getEventWithLocation(-16, -16, category.id));\r",
											"        let event3 = await api.addEvent(user.id, rnd.getEventWithLocation(10000, -10000, category.id));\r",
											"        event1 = await api.publishEvent(event1.id);\r",
											"        event2 = await api.publishEvent(event2.id);\r",
											"        event3 = await api.publishEvent(event3.id);\r",
											"\r",
											"        const submittedUser = await api.addUser(rnd.getUser());\r",
											"        const requestToJoin1 = await api.publishParticipationRequest(event1.id, submittedUser.id);\r",
											"        const requestToJoin2 = await api.publishParticipationRequest(event2.id, submittedUser.id);\r",
											"        const requestToJoin3 = await api.publishParticipationRequest(event3.id, submittedUser.id);\r",
											"        pm.collectionVariables.set(\"userId\", Number(submittedUser.id))\r",
											"\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    let location;\r",
											"    try {\r",
											"        location = loc.getLocation();\r",
											"        location = await api.addLocation(location);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Событий должно быть только 1. Это события происходящие близко от последней затребованной точки\", function () {\r",
											"    pm.expect(target.length).equal(1);\r",
											"    pm.expect(target[0].location.lat).equal(10000);\r",
											"    pm.expect(target[0].location.lon).equal(-10000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/locations?isNearLastVisited=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										"locations"
									],
									"query": [
										{
											"key": "isNearLastVisited",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}"
										}
									]
								},
								"description": "Обратите внимание: имя категории должно быть уникальным"
							},
							"response": []
						},
						{
							"name": "Получить события пользователя по двум точкам одновременно",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", user.id)\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event1 = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        let event2 = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        let event3 = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        event1 = await api.publishEvent(event1.id);\r",
											"        event2 = await api.publishEvent(event2.id);\r",
											"        event3 = await api.publishEvent(event3.id);\r",
											"\r",
											"        const submittedUser = await api.addUser(rnd.getUser());\r",
											"        const requestToJoin1 = await api.publishParticipationRequest(event1.id, submittedUser.id);\r",
											"        const requestToJoin2 = await api.publishParticipationRequest(event2.id, submittedUser.id);\r",
											"        const requestToJoin3 = await api.publishParticipationRequest(event3.id, submittedUser.id);\r",
											"        pm.collectionVariables.set(\"userId\", Number(submittedUser.id))\r",
											"\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    let location;\r",
											"    try {\r",
											"        location = rnd.getLocation();\r",
											"        location = await api.addLocation(location);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/locations?isNearLastVisited=true&isNearFavorite=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										"locations"
									],
									"query": [
										{
											"key": "isNearLastVisited",
											"value": "true"
										},
										{
											"key": "isNearFavorite",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}"
										}
									]
								},
								"description": "Обратите внимание: имя категории должно быть уникальным"
							},
							"response": []
						},
						{
							"name": "Получить события пользователя не выбрав свойства точки",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", user.id)\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event1 = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        let event2 = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        let event3 = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        event1 = await api.publishEvent(event1.id);\r",
											"        event2 = await api.publishEvent(event2.id);\r",
											"        event3 = await api.publishEvent(event3.id);\r",
											"\r",
											"        const submittedUser = await api.addUser(rnd.getUser());\r",
											"        const requestToJoin1 = await api.publishParticipationRequest(event1.id, submittedUser.id);\r",
											"        const requestToJoin2 = await api.publishParticipationRequest(event2.id, submittedUser.id);\r",
											"        const requestToJoin3 = await api.publishParticipationRequest(event3.id, submittedUser.id);\r",
											"        pm.collectionVariables.set(\"userId\", Number(submittedUser.id))\r",
											"\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    let location;\r",
											"    try {\r",
											"        location = rnd.getLocation();\r",
											"        location = await api.addLocation(location);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/locations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										"locations"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}"
										}
									]
								},
								"description": "Обратите внимание: имя категории должно быть уникальным"
							},
							"response": []
						}
					]
				},
				{
					"name": "Unauthorized Get Events Near Location",
					"item": [
						{
							"name": "Получить события рядом с точкой",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", user.id)\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event1 = await api.addEvent(user.id, rnd.getEventWithLocation(151, 151, category.id));\r",
											"        let event2 = await api.addEvent(user.id, rnd.getEventWithLocation(749, -3, category.id));\r",
											"        let event3 = await api.addEvent(user.id, rnd.getEventWithLocation(140, 140, category.id));\r",
											"        event1 = await api.publishEvent(event1.id);\r",
											"        event2 = await api.publishEvent(event2.id);\r",
											"        event3 = await api.publishEvent(event3.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Событий должно быть только 2. Это события происходящие близко от поисковой точки\", function () {\r",
											"    pm.expect(target.length).equal(2);\r",
											"    pm.expect(target[0].location.lat).equal(151);\r",
											"    pm.expect(target[1].location.lon).equal(140);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/events?latitude=150&longitude=150&maxDistance=2000",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events"
									],
									"query": [
										{
											"key": "latitude",
											"value": "150"
										},
										{
											"key": "longitude",
											"value": "150"
										},
										{
											"key": "maxDistance",
											"value": "2000"
										}
									]
								},
								"description": "Обратите внимание: имя категории должно быть уникальным"
							},
							"response": []
						},
						{
							"name": "Получить события рядом с точкой забыв указать одну из координат",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", user.id)\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event1 = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        let event2 = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        let event3 = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        event1 = await api.publishEvent(event1.id);\r",
											"        event2 = await api.publishEvent(event2.id);\r",
											"        event3 = await api.publishEvent(event3.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/events?latitude=150&maxDistance=2000",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events"
									],
									"query": [
										{
											"key": "latitude",
											"value": "150"
										},
										{
											"key": "maxDistance",
											"value": "2000"
										}
									]
								},
								"description": "Обратите внимание: имя категории должно быть уникальным"
							},
							"response": []
						}
					]
				},
				{
					"name": "Admin Patch Location",
					"item": [
						{
							"name": "Изменение существующей локации",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"    let location;\r",
											"    try {\r",
											"        location = await api.addLocation(rnd.getLocation());\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"    pm.collectionVariables.set(\"locationId\", Number(location.id))\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            latitude : rnd.getLocation().latitude,\r",
											"            longitude : rnd.getLocation().longitude,\r",
											"            description : rnd.getLocation().description\r",
											"        }),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.be.ok;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Категория должна содержать поля: id, latitude, longitude, description\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('latitude');\r",
											"pm.expect(target).to.have.property('longitude');\r",
											"pm.expect(target).to.have.property('description');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(source.latitude).equal(target.latitude, 'Широта должна совпадать с отправленной');\r",
											"    pm.expect(source.longitude).equal(target.longitude, 'Долгота должна совпадать с отправленной');\r",
											"    pm.expect(source.description).equal(target.description, 'Описание должно совпадать с отправленной');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/locations/:locationId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"locations",
										":locationId"
									],
									"variable": [
										{
											"key": "locationId",
											"value": "{{locationId}}"
										}
									]
								},
								"description": "Обратите внимание: имя категории должно быть уникальным"
							},
							"response": []
						},
						{
							"name": "Изменение существующей локации - указали долготу без широты",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    class GetLocation {\r",
											"    getLocation() {\r",
											"        return {\r",
											"            description: pm.variables.replaceIn('{{$randomFullName}}'),\r",
											"            latitude: 70,\r",
											"            longitude: -70\r",
											"        };\r",
											"    }\r",
											"    }\r",
											"    const loc = new GetLocation();\r",
											"\r",
											"    let location;\r",
											"    try {\r",
											"        location = loc.getLocation();\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    try {\r",
											"        location = await api.addLocation(location);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"    pm.collectionVariables.set(\"locationId\", Number(location.id))\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            latitude : rnd.getLocation().latitude,\r",
											"            description : rnd.getLocation().description\r",
											"        }),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.be.ok;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Категория должна содержать поля: id, latitude, longitude, description\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('latitude');\r",
											"pm.expect(target).to.have.property('longitude');\r",
											"pm.expect(target).to.have.property('description');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(source.description).equal(target.description, 'Описание должно совпадать с отправленной');\r",
											"});\r",
											"\r",
											"pm.test(\"Широта должна остаться той же, что и была\", function () {\r",
											"    pm.expect(70).equal(target.latitude, 'Широта должна остаться старой');\r",
											"    pm.expect(-70).equal(target.longitude, 'Долгота должна остаться старой');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/locations/:locationId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"locations",
										":locationId"
									],
									"variable": [
										{
											"key": "locationId",
											"value": "{{locationId}}"
										}
									]
								},
								"description": "Обратите внимание: имя категории должно быть уникальным"
							},
							"response": []
						},
						{
							"name": "Изменение существующей локации - новое описание не соответствует стандартам",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"    let location;\r",
											"    try {\r",
											"        location = await api.addLocation(rnd.getLocation());\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"    pm.collectionVariables.set(\"locationId\", Number(location.id))\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            latitude : rnd.getLocation().latitude,\r",
											"            longitude : rnd.getLocation().longitude,\r",
											"            description : 'asdfasdfasdfasdfasfasdfasdfasdfasfasfasfasfdasfasfasfasfasdf05asf50asf654asdf065sa0df65as06f50asf5640fs546s0f56asdf406as54f65asd4f065as0f65ds40f65ads04f56ads04f65d0s4f650d4as6f50as65f0ds65f065ads40f65das0f65da04f56a40ds65f4056d0f465adsf65ads40f65ad40sf504as56f046ads40f65as0d4f560s4df6504asdf5604sd56f0a5ds40fa5ds40f65as40df6540asdf560asd6f50asd65f0asd05fasd0f56sa05f6ads45f65ads0f65as40df650ad4s56f04s6d5f40as6d40f6a5ds0f65ads04f56ads0f654a0sd56f0asd56f04as6504f56ads0f465ads0f5adsf40a65ds40f56ad40fa0sd4f65a0dsf5604asd56f04as6d4f065as04df56ads0f560asd6f06sd50f6a5ds0f65ads4f45sd0f64as6d5f4asd6450f6ads450f56ads40f56ad40sf65ds40'\r",
											"        }),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/locations/:locationId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"locations",
										":locationId"
									],
									"variable": [
										{
											"key": "locationId",
											"value": "{{locationId}}"
										}
									]
								},
								"description": "Обратите внимание: имя категории должно быть уникальным"
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"",
					"    async addUser(user, verbose=null) {",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
					"    }",
					"",
					"    async addCategory(category, verbose=null) {",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
					"    }",
					"",
					"    async addLocation(category, verbose=null) {",
					"        return this.post(\"/admin/locations\", category, \"Ошибка при добавлении новой локации: \", verbose);",
					"    }",
					"",
					"",
					"    async addEvent(userId, event, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
					"    }",
					"",
					"    async addCompilation(compilation, verbose=null) {",
					"        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
					"    }",
					"",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {",
					"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
					"    }",
					"",
					"    async publishEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
					"    }",
					"    ",
					"    async rejectEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
					"    }",
					"",
					"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
					"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests/', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
					"    }",
					"",
					"    async findCategory(catId, verbose=null) {",
					"        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);",
					"    }",
					"",
					"    async findCompilation(compId, verbose=null) {",
					"        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);",
					"    }",
					"",
					"    async findEvent(eventId, verbose=null) {",
					"        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);",
					"    }",
					"",
					"    async findUser(userId, verbose=null) {",
					"        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
					"    }",
					"",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { \"Content-Type\": \"application/json\" },",
					"            };",
					"",
					"            if(verbose) {",
					"                console.log(\"Отправляю запрос: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"",
					"                    if(verbose) {",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
					"                    }",
					"",
					"                    resolve(response.json());",
					"                });",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"};",
					"",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')",
					"        };",
					"    }",
					"",
					"    getCategory() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
					"        };",
					"    }",
					"",
					"    getLocation() {",
					"        return {",
					"            description: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            latitude: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"            longitude: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}'))",
					"        }",
					"    }",
					"",
					"    getEvent(categoryId) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"",
					"    getEventWithLocation(latitude, longitude, categoryId) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: latitude,",
					"                lon: longitude,",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"",
					"    getCompilation(...eventIds) {",
					"        return {",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            events: eventIds",
					"        };",
					"    }",
					"",
					"",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"",
					"    getWord(length = 1) {",
					"        let result = '';",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"        const charactersLength = characters.length;",
					"        let counter = 0;",
					"        while (counter < length) {",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
					"            counter += 1;",
					"        }",
					"        return result;",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "usersCount",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "request_body",
			"value": ""
		},
		{
			"key": "mail",
			"value": ""
		},
		{
			"key": "response",
			"value": ""
		},
		{
			"key": "uid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catname",
			"value": ""
		},
		{
			"key": "eid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "compid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "toCheck",
			"value": ""
		},
		{
			"key": "newDataToSet",
			"value": ""
		},
		{
			"key": "uid1",
			"value": ""
		},
		{
			"key": "reqid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catId",
			"value": ""
		},
		{
			"key": "confirmedRequests",
			"value": ""
		},
		{
			"key": "responseArr",
			"value": ""
		},
		{
			"key": "source1",
			"value": ""
		},
		{
			"key": "source2",
			"value": ""
		},
		{
			"key": "fromId",
			"value": "0"
		},
		{
			"key": "source",
			"value": ""
		},
		{
			"key": "locationId",
			"value": ""
		},
		{
			"key": "10",
			"value": ""
		},
		{
			"key": "userId",
			"value": ""
		}
	]
}